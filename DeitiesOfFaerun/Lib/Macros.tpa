//CamDawg's code to add icons

DEFINE_ACTION_FUNCTION cd_new_portrait_icon
  INT_VAR string = 0
  STR_VAR bam_file = "****"
  RET     icon
  BEGIN

COPY_EXISTING ~statdesc.2da~ ~override~
    COUNT_2DA_ROWS 3 count
    READ_2DA_ENTRY (count - 1) 0 3 icon
    SET icon += 1

  APPEND ~statdesc.2da~ ~%icon% %string% %bam_file%~

END

//CamDawg's code to add summons

DEFINE_ACTION_FUNCTION cd_new_summon_table
  STR_VAR descript = "foo"
          2da_file = "foo"
  RET     table
  BEGIN

  COPY_EXISTING ~smtables.2da~ ~override~
    COUNT_2DA_ROWS 2 count
    READ_2DA_ENTRY (count - 1) 0 2 table
    INNER_PATCH_SAVE table ~%table%~ BEGIN
      REPLACE_TEXTUALLY ~^\([0-9]+\).+$~ ~\1~
    END
    SET table += 1

  APPEND ~smtables.2da~ ~%table%_%descript% %2da_file%~

END

//CamDawg's code to turn spells into innates - adapted to make every innate spell ability have a SF 3 as PnP rules.

DEFINE_PATCH_MACRO ~SPELL_TO_INNATE~ BEGIN

  READ_LONG   0x64 abil_off ELSE 0
  READ_SHORT  0x68 abil_num ELSE 0
  READ_ASCII  (abil_off + 0x04) bam (8)
  WRITE_SHORT  0x1C 4
  WRITE_LONG   0x34 1
  WRITE_ASCIIE 0x3A "%bam%" #8
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN
    WRITE_SHORT (abil_off + 0x02 + (0x28 * index)) 4
    WRITE_SHORT (abil_off + 0x12 + (0x28 * index)) 3
    END
 END

//Raduziel's macro to turn spells into kit's features.

DEFINE_PATCH_MACRO ~SPELL_TO_FEATURE~ BEGIN

WRITE_SHORT 0x1C 4                                                    
WRITE_LONG  0x34 1                                                         
WRITE_LONG  0x22 00
WRITE_LONG NAME1 ~-1~ 
WRITE_LONG UNIDENTIFIED_DESC ~-1~

FOR (level = 2; level < 51; level += 1) BEGIN
LPF DELETE_SPELL_HEADER INT_VAR silent = 1 header_type = ~-1~ min_level = level  END
END

LPF ALTER_SPELL_HEADER  INT_VAR projectile = 0 target = 5 range = 0 speed = 0 location = 0 END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 8   END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 9   END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 50  END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 139 END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 141 END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 174 END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 215 END
LPF DELETE_SPELL_EFFECT INT_VAR silent = 1 opcode_to_delete = 321 END
LPF ALTER_EFFECT INT_VAR target = 2 timing = 9 duration = 0 power = 0 resist_dispel = 0 END

END

//Kjeron's code to create ability headers

DEFINE_PATCH_FUNCTION	ADD_ABILITIES	INT_VAR	abil = 0	target = 1	range = 0	speed = 0	STR_VAR	icon = ~~	BEGIN
		WRITE_SHORT	 0x68  abil	
		WRITE_LONG	 0x6a (0x72 + abil * 0x28)
		INSERT_BYTES 0x72 (0x28 * abil)
		INNER_PATCH_SAVE ability ~~	BEGIN
		INSERT_BYTES 0 0x28
		WRITE_BYTE 0x0 1
		WRITE_BYTE 0x2 4
		WRITE_EVALUATED_ASCII 0x4 ~%icon%~ #8
		WRITE_BYTE  0xc	target
		WRITE_SHORT	0xe	range
		WRITE_SHORT	0x10 1
		WRITE_SHORT	0x12 speed
		WRITE_SHORT	0x26 1
		END
		FOR	(i = 0; i < abil; ++i) BEGIN
			WRITE_EVALUATED_ASCII (0x72 + i * 0x28)	~%ability%~	(0x28)
			WRITE_SHORT	(0x82 + i * 0x28) (i + 1)
		END
END
	
//Beautiful piece of code by Subtledoctor

DEFINE_PATCH_FUNCTION AT_WILL  BEGIN
  READ_SHORT 0x1c spell_type
  PATCH_IF  (%spell_type% = 4) BEGIN
    LPF ADD_SPELL_CFEFFECT INT_VAR insert_point = 0 opcode = 171 target = 1 timing = 9 STR_VAR resource = EVAL ~%SOURCE_RES%~ END
    LPF ADD_SPELL_CFEFFECT INT_VAR insert_point = 0 opcode = 172 target = 1 timing = 9 STR_VAR resource = EVAL ~%SOURCE_RES%~ END
  END
END

//No touching-effect through Mirror Image, Reflect Image, Iron Skin and Stoneskin - by Kjeron (part I)

DEFINE_ACTION_FUNCTION ADD_SPLPROT INT_VAR stat = 0	value = 0 relation = 0	new_row = ~-1~ RET	new_row BEGIN
		COPY_EXISTING ~SPLPROT.2DA~	override
			COUNT_2DA_COLS cols READ_2DA_ENTRIES_NOW READ cols
			FOR	(i = 0; i < READ; ++i)	BEGIN
				PATCH_IF (~%stat%~ STRING_EQUAL EVAL ~%READ_%i%_1%~) AND (~%value%~ STRING_EQUAL EVAL ~%READ_%i%_2%~) AND (~%relation%~ STRING_EQUAL EVAL ~%READ_%i%_3%~) BEGIN
					SET	new_row = i
					SET	i = READ
				END
			END
			PATCH_IF new_row = ~-1~	BEGIN
				FOR	(i = 0; i < READ; ++i)	BEGIN
					PATCH_IF (~*~ STRING_EQUAL EVAL ~%READ_%i%_1%~)	BEGIN
						SET	new_row = i	SET	i = READ
						REMOVE_2DA_ROW new_row cols
						INSERT_2DA_ROW new_row cols ~%new_row% %stat% %value% %relation%~
					END
				END
				    PATCH_IF new_row = ~-1~	BEGIN 
					    SET new_row =  READ
					    INSERT_2DA_ROW READ cols    ~%new_row% %stat% %value% %relation%~
				    END
			END
		BUT_ONLY
	END
	
DEFINE_ACTION_FUNCTION MODIFY_POISON_WEAPON INT_VAR parameter2 = 0 BEGIN
		COPY_EXISTING ~bdpweapn.SPL~ override
			LPF	ADD_SPELL_EFFECT INT_VAR insert_point = 0 opcode = 318 target = 2 parameter2 STR_VAR resource = EVAL ~%SOURCE_RES%~	END
		BUT_ONLY IF_EXISTS
	END
	
DEFINE_PATCH_FUNCTION BLOCK_EFFECTS	INT_VAR	abort = 0 parameter2 = 0 aoe_gaze = 0 BEGIN
		READ_LONG 0x64 ab_off READ_SHORT 0x68 ab_num READ_LONG 0x6a	fx_off
		FOR	(i = 0; i < ab_num; ++i) BEGIN
			PATCH_IF BYTE_AT (ab_off + i * 0x38 + 0x2) = 1 BEGIN
				READ_SHORT	 (ab_off + i * 0x38 + 0x2a) proj
				PATCH_MATCH	aoe_gaze WITH
					1	WHEN VARIABLE_IS_SET $pronum(~%proj%~) AND ($pronum(~%proj%~) = 3) BEGIN END
					1	WHEN SHORT_AT        (ab_off + i * 0x38 + 0x2a) = 65               BEGIN END
				DEFAULT
					READ_SHORT (ab_off + i * 0x38 + 0x1e) fx_num
					READ_SHORT (ab_off + i * 0x38 + 0x20) fx_idx
					FOR	(j = 0; j < fx_num; ++j) BEGIN
						READ_ASCII (fx_off + (j + fx_idx) * 0x30 + 0x14) resource
						PATCH_MATCH	SHORT_AT (fx_off + (j + fx_idx) * 0x30) WITH
							58	60	280	BEGIN SET	abort = 1 END
							177	        WHEN VARIABLE_IS_SET $effDispelList(~%resource%~) AND $effDispelList(~%resource%~) = 1 BEGIN SET abort = 1 END
							146 148 326	WHEN VARIABLE_IS_SET $splDispelList(~%resource%~) AND $splDispelList(~%resource%~) = 1 BEGIN SET abort = 1 END
							DEFAULT
						END
					END
					PATCH_IF !abort AND fx_num	BEGIN
						LPF	ADD_ITEM_EFFECT	INT_VAR	header = (i + 1) type = 99 insert_point = 0	opcode = 318 target = 2	parameter2 STR_VAR resource = EVAL ~%SOURCE_RES%~ END
					END
				END
			END
		END
	END
	
DEFINE_ACTION_FUNCTION INDEX_EFFS INT_VAR sub = 0 RET_ARRAY	eff25List eff78List	eff109List	eff216List	effDispelList BEGIN
		OUTER_SPRINT   $eff25List(~?~)     ~~ OUTER_SPRINT $eff78List(~?~) ~~ OUTER_SPRINT $eff109List(~?~) ~~ OUTER_SPRINT	$eff216List(~?~) ~~
		OUTER_SPRINT   $effDispelList(~?~) ~~
		COPY_EXISTING_REGEXP ~^.+\.eff$~ override
			PATCH_MATCH	(LONG_AT 0x10)   WITH
				25	        WHEN sub = 0 BEGIN SET $eff25List    (~%SOURCE_RES%~) = 1 END
				78	        WHEN sub = 0 BEGIN SET $eff78List    (~%SOURCE_RES%~) = 1 END
				109	        WHEN sub = 0 BEGIN SET $eff109List   (~%SOURCE_RES%~) = 1 END
				216	        WHEN sub = 0 BEGIN SET $op216List    (~%SOURCE_RES%~) = 1 END
				78	        WHEN sub = 0 BEGIN SET $eff216List   (~%SOURCE_RES%~) = 1 END
				58	60	280	WHEN sub = 0 BEGIN SET $effDispelList(~%SOURCE_RES%~) = 1 END
				146	148	326	WHEN sub	 BEGIN
					READ_ASCII	(0x30)	resource
					PATCH_MATCH	1	WITH
						$spl25List    (~%resource%~) WHEN VARIABLE_IS_SET $spl25List    (~%resource%~) BEGIN SET $eff25List    (~%SOURCE_RES%~) = 1	END
						$spl78List    (~%resource%~) WHEN VARIABLE_IS_SET $spl78List    (~%resource%~) BEGIN SET $eff78List    (~%SOURCE_RES%~) = 1	END
						$spl109List   (~%resource%~) WHEN VARIABLE_IS_SET $spl109List   (~%resource%~) BEGIN SET $eff109List   (~%SOURCE_RES%~) = 1	END
						$spl216List   (~%resource%~) WHEN VARIABLE_IS_SET $spl216List   (~%resource%~) BEGIN SET $eff216List   (~%SOURCE_RES%~) = 1	END
						$splDispelList(~%resource%~) WHEN VARIABLE_IS_SET $splDispelList(~%resource%~) BEGIN SET $effDispelList(~%SOURCE_RES%~) = 1	END
						DEFAULT
					END
				END
				DEFAULT
			END
		BUT_ONLY
	END
	
DEFINE_ACTION_FUNCTION	INDEX_SPELLS	INT_VAR	sub	= 0	RET_ARRAY	spl25List	spl78List	spl109List	spl216List	splDispelList	BEGIN
		OUTER_SPRINT	$spl25List(~?~) ~~	OUTER_SPRINT	$spl78List(~?~) ~~	OUTER_SPRINT	$spl109List(~?~) ~~	OUTER_SPRINT	$spl216List(~?~) ~~
		OUTER_SPRINT	$splDispelList(~?~) ~~
		COPY_EXISTING_REGEXP	~^.+\.spl$~	override
			READ_LONG	0x64	ab_off	READ_SHORT	0x68	ab_num	READ_LONG	0x6a	fx_off
			SET	$op25List(~%SOURCE_RES%~) = 0	SET	$op25List(~%SOURCE_RES%~) = 0	SET	$op25List(~%SOURCE_RES%~) = 0	SET	$op25List(~%SOURCE_RES%~) = 0
			SET	$dispelList(~%SOURCE_RES%~) = 0
			FOR	(i = 0; i < ab_num; ++i)	BEGIN
				READ_SHORT	(ab_off + i * 0x28 + 0x1e)	fx_num
				READ_SHORT	(ab_off + i * 0x28 + 0x20)	fx_idx
				FOR	(j = 0; j < fx_num; ++j)	BEGIN
					PATCH_MATCH	SHORT_AT (fx_off + (j + fx_idx) * 0x30) WITH
						25	        WHEN sub = 0 BEGIN SET $op25List  (~%SOURCE_RES%~) = 1 END
						78	        WHEN sub = 0 BEGIN SET $op78List  (~%SOURCE_RES%~) = 1 END
						109	        WHEN sub = 0 BEGIN SET $op109List (~%SOURCE_RES%~) = 1 END
						216	        WHEN sub = 0 BEGIN SET $op216List (~%SOURCE_RES%~) = 1 END
						78	        WHEN sub = 0 BEGIN SET $op78List  (~%SOURCE_RES%~) = 1 END
						58	60	280 WHEN sub = 0 BEGIN SET $dispelList(~%SOURCE_RES%~) = 1 END
						177	        WHEN sub = 0 BEGIN
							READ_ASCII	(fx_off + (j + fx_idx) * 0x30 + 0x14)	resource
							PATCH_MATCH	1	WITH
								$eff25List    (~%resource%~) WHEN VARIABLE_IS_SET $eff25List    (~%resource%~)BEGIN SET $spl25List     (~%SOURCE_RES%~) = 1	END
								$eff78List    (~%resource%~) WHEN VARIABLE_IS_SET $eff78List    (~%resource%~)BEGIN SET $spl78List     (~%SOURCE_RES%~) = 1	END
								$eff109List   (~%resource%~) WHEN VARIABLE_IS_SET $eff109List   (~%resource%~)BEGIN SET $spl109List    (~%SOURCE_RES%~) = 1	END
								$eff216List   (~%resource%~) WHEN VARIABLE_IS_SET $eff216List   (~%resource%~)BEGIN SET $spl216List    (~%SOURCE_RES%~) = 1	END
								$effDispelList(~%resource%~) WHEN VARIABLE_IS_SET $effDispelList(~%resource%~) BEGIN SET $splDispelList(~%SOURCE_RES%~) = 1	END
								DEFAULT
							END
						END
						146	148	326	WHEN 	sub	BEGIN
							READ_ASCII	(fx_off + (j + fx_idx) * 0x30 + 0x14)	resource
							PATCH_MATCH	1	WITH
								$spl25List    (~%resource%~) WHEN VARIABLE_IS_SET $spl25List    (~%resource%~) BEGIN SET $spl25List    (~%SOURCE_RES%~) = 1	END
								$spl78List    (~%resource%~) WHEN VARIABLE_IS_SET $spl78List    (~%resource%~) BEGIN SET $spl78List    (~%SOURCE_RES%~) = 1	END
								$spl109List   (~%resource%~) WHEN VARIABLE_IS_SET $spl109List   (~%resource%~) BEGIN SET $spl109List   (~%SOURCE_RES%~) = 1	END
								$spl216List   (~%resource%~) WHEN VARIABLE_IS_SET $spl216List   (~%resource%~) BEGIN SET $spl216List   (~%SOURCE_RES%~) = 1	END
								$splDispelList(~%resource%~) WHEN VARIABLE_IS_SET $splDispelList(~%resource%~) BEGIN SET $splDispelList(~%SOURCE_RES%~) = 1	END
								DEFAULT
							END
						END
						DEFAULT
					END
				END
			END
		BUT_ONLY
	END	
	
DEFINE_PATCH_FUNCTION BLOCK_EFFECT INT_VAR opcode = ~-1~ target = 2	parameter2 = 0	aoe_gaze = 0 BEGIN
		READ_LONG 0x64 ab_off READ_SHORT 0x68 ab_num READ_LONG 0x6a	fx_off
		FOR	(i = 0; i < ab_num; ++i) BEGIN
			PATCH_IF BYTE_AT (ab_off + i * 0x38 + 0x2) = 1 BEGIN
				READ_SHORT (ab_off + i * 0x38 + 0x2a) proj
				PATCH_MATCH	aoe_gaze	WITH
					1	WHEN VARIABLE_IS_SET $pronum(~%proj%~) AND ($pronum(~%proj%~) = 3) BEGIN END
					1	WHEN SHORT_AT        (ab_off + i * 0x38 + 0x2a) = 65	           BEGIN END
				DEFAULT
					READ_SHORT (ab_off + i * 0x38 + 0x1e) fx_num
					READ_SHORT (ab_off + i * 0x38 + 0x20) fx_idx
					FOR	(j = 0; j < fx_num; ++j) BEGIN
						PATCH_IF	BYTE_AT (fx_off + (j + fx_idx) * 0x30 + 0x2) = target BEGIN
							READ_ASCII	(fx_off + (j + fx_idx) * 0x30 + 0x14)	resource
							PATCH_MATCH	SHORT_AT (fx_off + (j + fx_idx) * 0x30)	WITH
								opcode BEGIN
									LPF	ADD_ITEM_EFFECT	INT_VAR	header = (i + 1) type = 99 insert_point = 0	opcode = 318 target	parameter2
																			STR_VAR	resource = EVAL ~%SOURCE_RES%~	END	SET	j = fx_num
								END
								177	        WHEN VARIABLE_IS_SET $ EVAL ~eff%opcode%List~(~%resource%~) AND $ EVAL ~eff%opcode%List~(~%resource%~) = 1 BEGIN
									LPF	ADD_ITEM_EFFECT	INT_VAR	header = (i + 1) type = 99 insert_point = 0	opcode = 318 target	parameter2
																			STR_VAR	resource = EVAL ~%SOURCE_RES%~	END	SET	j = fx_num
								END
								146 148 326	WHEN VARIABLE_IS_SET $ EVAL ~spl%opcode%List~(~%resource%~) AND $ EVAL ~spl%opcode%List~(~%resource%~) = 1 BEGIN
									LPF	ADD_ITEM_EFFECT	INT_VAR	header = (i + 1) type = 99 insert_point = 0	opcode = 318 target	parameter2
																			STR_VAR	resource = EVAL ~%SOURCE_RES%~	END	SET	j = fx_num
								END
								DEFAULT
							END
						END
					END
				END
			END
		END
	END
	
DEFINE_ACTION_FUNCTION GET_AOE_PROJ RET_ARRAY proList BEGIN
		OUTER_SPRINT $proList(~?~) ~~
		COPY_EXISTING_REGEXP ~.*\.pro~ override	SET	$protype(~%SOURCE_RES%~) = (BYTE_AT 0x8) BUT_ONLY
		COPY_EXISTING ~PROJECTL.IDS~   override
			READ_2DA_ENTRIES_NOW READ 2
			FOR(i = 1; i < READ; ++i) BEGIN
				READ_2DA_ENTRY_FORMER READ i 1 filename
				PATCH_IF VARIABLE_IS_SET $protype(~%filename%~)	BEGIN
					READ_2DA_ENTRY_FORMER READ i 0 ids ++ids
					SET	$proList(~%ids%~) = $protype(~%filename%~)
				END
			END
		BUT_ONLY
	END

//The following codes were made by Argent77

DEFINE_ACTION_FUNCTION TO_HEX_NUMBER
INT_VAR
  value     = 0
  minDigits = 1
  prefix    = 0
RET
  hexNumber
BEGIN
  ACTION_IF (minDigits < 1) BEGIN OUTER_SET minDigits = 1 END
  ACTION_IF (minDigits > 8) BEGIN OUTER_SET minDigits = 8 END
  OUTER_TEXT_SPRINT hexNumber ~~
  ACTION_DEFINE_ARRAY digit BEGIN ~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~ ~a~ ~b~ ~c~ ~d~ ~e~ ~f~ END

  ACTION_IF (value < 0) BEGIN
    OUTER_SET signed = 1
    OUTER_SET value = 0 - value
  END ELSE BEGIN
    OUTER_SET signed = 0
  END

  OUTER_WHILE (value != 0) BEGIN
    OUTER_SET curDigit = value BAND 0xf
    OUTER_SET value = value BLSR 4
    OUTER_TEXT_SPRINT hexDigit $EVAL digit(~%curDigit%~)
    OUTER_TEXT_SPRINT hexNumber ~%hexDigit%%hexNumber%~
  END

  OUTER_WHILE (STRING_LENGTH ~%hexNumber%~ < minDigits) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~0%hexNumber%~
  END

  ACTION_IF (prefix) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~0x%hexNumber%~
  END

  ACTION_IF (signed) BEGIN
    OUTER_TEXT_SPRINT hexNumber ~-%hexNumber%~
  END
END

DEFINE_PATCH_FUNCTION TO_HEX_NUMBER
INT_VAR
  value     = 0
  minDigits = 1
  prefix    = 0
RET
  hexNumber
BEGIN
  INNER_ACTION BEGIN
    LAF TO_HEX_NUMBER INT_VAR value = value minDigits = minDigits prefix = prefix RET hexNumber END
  END
END

DEFINE_ACTION_FUNCTION ADD_SPLPROT_ENTRY
INT_VAR
  stat      = "-1"
STR_VAR
  value     = "*"
  relation  = "*"
RET
  index
BEGIN
  OUTER_SET index = "-1"

  ACTION_IF (stat >= 0) BEGIN
    LAF TO_HEX_NUMBER INT_VAR value = stat RET hexNumber END
    OUTER_TEXT_SPRINT valueHex ~0x%hexNumber%~
    ACTION_IF (~%value%~ STRING_EQUAL ~~) BEGIN
      OUTER_TEXT_SPRINT value ~*~
    END
    ACTION_IF (~%relation%~ STRING_EQUAL ~~) BEGIN
      OUTER_TEXT_SPRINT relation ~*~
    END

    ACTION_IF (FILE_EXISTS_IN_GAME ~splprot.2da~) BEGIN
      COPY_EXISTING ~splprot.2da~ ~override~
        READ_2DA_ENTRIES_NOW table 4
        FOR (idx = 0; idx < table; idx += 1) BEGIN
          READ_2DA_ENTRY_FORMER table idx 1 curStat
          PATCH_IF (~%stat%~ STRING_EQUAL ~%curStat%~ OR ~%valueHex%~ STRING_EQUAL_CASE ~%curStat%~) BEGIN
            READ_2DA_ENTRY_FORMER table idx 2 curValue
            PATCH_IF (~%value%~ STRING_EQUAL ~%curValue%~) BEGIN
              READ_2DA_ENTRY_FORMER table idx 3 curRelation
              PATCH_IF (~%relation%~ STRING_EQUAL ~%curRelation%~) BEGIN
                SET index = idx
                SET idx = table
              END
            END
          END
        END
		
        PATCH_IF (index < 0) BEGIN
        PATCH_IF (stat >= 0x100) BEGIN
            TEXT_SPRINT line ~%table% %valueHex% %value% %relation%~
          END ELSE BEGIN
            TEXT_SPRINT line ~%table% %stat% %value% %relation%~
          END
          INSERT_2DA_ROW table 4 ~%line%~
          SET index = table
        END
      BUT_ONLY
    END
  END
END

<<<<<<<< .../inlined/creature/animation/slots.txt
"0410" "1000" "1003" "1004" "1100" "1101" "1102" "1103" "1104" "1105" "1200" "1201" "1202" "1203" "1204" "1205" "1206" "1207" "1208" "1300" "2000" "2100" "2200" "2300" "3000" "3001" "4000" "4001" "4002" "4010" "4012" "4100" "4101" "4102" "4110" "4112" "4200" "4300" "4400" "4410" "4500" "4600" "4700" "4710" "4800" "5000" "5001" "5002" "5003" "5010" "5011" "5012" "5013" "5100" "5101" "5102" "5103" "5110" "5111" "5112" "5113" "5200" "5201" "5202" "5210" "5211" "5212" "5300" "5301" "5302" "5303" "5310" "5311" "5312" "5313" "6000" "6001" "6002" "6003" "6004" "6005" "6010" "6011" "6012" "6013" "6014" "6015" "6100" "6101" "6102" "6103" "6104" "6105" "6110" "6111" "6112" "6113" "6114" "6115" "6200" "6201" "6202" "6204" "6205" "6210" "6211" "6212" "6214" "6215" "6300" "6301" "6302" "6303" "6304" "6305" "6310" "6311" "6312" "6313" "6314" "6315" "6400" "6401" "6402" "6403" "6404" "6405" "6406" "6500" "6510" "6621" "7000" "7001" "7100" "7101" "7200" "7201" "7202" "7203" "7300" "7301" "7302" "7310" "7311" "7312" "7313" "7314" "7320" "7321" "7400" "7401" "7402" "7500" "7501" "7600" "7601" "7602" "7603" "7604" "7700" "7701" "7702" "7703" "7800" "7801" "7802" "7900" "7901" "7902" "7903" "7904" "7a00" "7a01" "7a02" "7a03" "7a04" "7b00" "7b01" "7b02" "7b03" "7b04" "7b05" "7b06" "7c00" "7c01" "7d00" "7d01" "7d02" "7d03" "7d04" "7d05" "7d06" "7d07" "7d08" "7e00" "7e01" "7f00" "7f01" "7f02" "7f03" "7f04" "7f05" "7f06" "7f07" "7f08" "7f09" "7f0a" "7f0b" "7f0c" "7f0d" "7f0e" "7f0f" "7f10" "7f11" "7f12" "7f13" "7f14" "7f15" "7f16" "7f17" "7f18" "7f19" "7f20" "7f21" "7f22" "7f23" "7f24" "7f27" "7f28" "7f29" "7f2a" "7f2b" "7f2c" "7f2d" "7f2e" "7f2f" "7f30" "7f31" "7f32" "7f33" "7f34" "7f35" "7f36" "7f37" "7f38" "7f39" "7f3a" "7f3b" "7f3c" "7f3d" "7f3e" "7f3f" "7f40" "7f41" "7f42" "7f43" "7f44" "7f45" "7f46" "7f47" "7f48" "7f49" "7f4a" "7f4b" "7f4c" "7f4d" "7f4e" "7f4f" "7f50" "7f51" "7f52" "7f53" "7f54" "7f55" "7f56" "7f57" "7f58" "7f59" "7f5a" "7f5b" "7f5c" "7f5d" "7f5e" "7f5f" "7f60" "7f61" "7f62" "8000" "8100" "8200" "9000" "a000" "a100" "a200" "a201" "a202" "b000" "b100" "b200" "b210" "b300" "b310" "b400" "b410" "b500" "b510" "b600" "b610" "b700" "c000" "c100" "c200" "c300" "c400" "c500" "c600" "c610" "c700" "c710" "c800" "c810" "c900" "c910" "ca00" "ca10" "cb00" "cc00" "cc01" "cc02" "cc04" "d000" "d100" "d200" "d300" "d400" "e000" "e010" "e020" "e040" "e050" "e060" "e070" "e080" "e090" "e0a0" "e0b0" "e0c0" "e0d0" "e0e0" "e0f0" "e0f1" "e0f2" "e200" "e210" "e220" "e230" "e240" "e241" "e242" "e243" "e244" "e245" "e246" "e247" "e248" "e249" "e24a" "e24b" "e24c" "e24d" "e24e" "e24f" "e250" "e251" "e252" "e253" "e254" "e255" "e256" "e257" "e258" "e259" "e25a" "e25b" "e25c" "e25d" "e25e" "e25f" "e260" "e261" "e262" "e263" "e264" "e265" "e266" "e267" "e26a" "e26b" "e26d" "e26e" "e26f" "e270" "e271" "e272" "e273" "e274" "e276" "e279" "e27d" "e27e" "e27f" "e280" "e281" "e282" "e283" "e288" "e289" "e28a" "e28b" "e28c" "e28d" "e28e" "e28f" "e290" "e291" "e292" "e293" "e294" "e300" "e310" "e320" "e330" "e400" "e410" "e420" "e430" "e440" "e441" "e442" "e443" "e444" "e500" "e510" "e520" "e600" "e610" "e6fe" "e700" "e710" "e720" "e800" "e810" "e820" "e830" "e840" "e900" "e910" "ea00" "ea10" "ea20" "eb00" "eb10" "eb20" "ec00" "ec10" "ec20" "ed00" "ed10" "ed20" "ee00" "ee10" "ef10"
>>>>>>>>
OUTER_TEXT_SPRINT animationSlotsPath ".../inlined/creature/animation/slots.txt"

DEFINE_PATCH_FUNCTION FIND_FREE_ANIM_SLOT
INT_VAR
  slotMin   = 0
  slotMax   = (slotMin BAND 0xf000) + 0x1000
  slotSteps = 1
RET
  slot
BEGIN
  SET slot = "-1"
  SET slotSteps = (slotSteps < 1) ? 1 : slotSteps
  SET slotMin = (slotMin < 0) ? 0 : slotMin
  SET slotMax = (slotMax < 0) ? 0 : slotMax
  PATCH_IF (slotMax < slotMin) BEGIN
    SET tmp = slotMin
    SET slotMin = slotMax
    SET slotMax = tmp
  END

  INNER_PATCH ~%animationSlots%~ BEGIN
    FOR (idx = slotMin; idx < slotMax; idx += slotSteps) BEGIN
      LOOKUP_IDS_SYMBOL_OF_INT name ~animate~ idx
      PATCH_IF (~%name%~ STR_EQ ~%idx%~) BEGIN
        LPF TO_HEX_NUMBER INT_VAR value = idx minDigits = 4 RET hexNumber END
        PATCH_IF (NOT FILE_EXISTS_IN_GAME ~%hexNumber%.ini~ AND 
                  ~%slotList%~ STRING_CONTAINS_REGEXP ~"%hexNumber%"~ != 0) BEGIN
          SET slot = idx
          SET idx = slotMax
        END
      END
    END
  END
END

DEFINE_ACTION_FUNCTION FIND_FREE_ANIM_SLOT
INT_VAR
	slotMin = 0
	slotMax = (slotMin BAND 0xf000) + 0x1000
	slotSteps = 1
RET
	slot
BEGIN
	OUTER_PATCH ~~ BEGIN
	LPF FIND_FREE_ANIM_SLOT
	INT_VAR
		slotMin = slotMin
		slotMax = slotMax
		slotSteps = slotSteps
	RET
		slot
	END
	END
END		
	
	
//EoF